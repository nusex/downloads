{"files": {".editorconfig": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.py]\nindent_size = 4\nindent_style = space\n\n[*.rst]\nindent_size = 4\nindent_style = space\n", ".gitignore": "### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n", "LICENSE": "BSD 3-Clause License\n\nCopyright (c) 2021, PROJECTAUTHOR\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n", "README.md": "# PROJECTNAME\n", "pyproject.toml": "[build-system]\nrequires = [\n    \"setuptools>=42\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\n", "requirements-dev.txt": "nusex<1,>=0.1\n", "setup.py": "import sys\n\nif sys.version_info < (3, 6, 0):\n    print(\n        \"PROJECTNAME only supports Python versions 3.6.0 or greater.\",\n        file=sys.stderr,\n    )\n    sys.exit(1)\n\nimport setuptools\n\n\ndef parse_requirements(path):\n    with open(path, mode=\"r\", encoding=\"utf-8\") as f:\n        deps = (d.strip() for d in f.readlines())\n        return [d for d in deps if not d.startswith((\"#\", \"-r\"))]\n\n\nwith open(\"PROJECTNAME/__init__.py\", mode=\"r\", encoding=\"utf-8\") as f:\n    (\n        productname,\n        version,\n        description,\n        url,\n        docs,\n        author,\n        email,\n        license_,\n        bug_tracker,\n    ) = [l.split('\"')[1] for l in f.readlines()[:9]]\n\nwith open(\"./README.md\", mode=\"r\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetuptools.setup(\n    name=productname,\n    version=version,\n    description=description,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=url,\n    author=author,\n    author_email=email,\n    license=license_,\n    classifiers=[ # Find more classifiers at: https://pypi.org/classifiers/\n        # \"Development Status :: 1 - Planning\",\n        # \"Development Status :: 2 - Pre-Alpha\",\n        \"Development Status :: 3 - Alpha\",\n        # \"Development Status :: 4 - Beta\",\n        # \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Natural Language :: English\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Unix\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Topic :: Software Development\",\n        \"Topic :: Utilities\",\n    ],\n    project_urls={\n        \"Documentation\": docs,\n        \"Source\": url,\n        \"Bug Tracker\": bug_tracker,\n    },\n    # install_requires=parse_requirements(\"./requirements.txt\"),\n    extras_require={\n        \"dev\": parse_requirements(\"./requirements-dev.txt\"),\n    },\n    python_requires=\">=3.6.0\",\n    packages=setuptools.find_packages(exclude=[\"tests*\"]),\n)\n", "requirements.txt": "", "PROJECTNAME/errors.py": "", "PROJECTNAME/__init__.py": "__productname__ = \"PROJECTNAME\"\n__version__ = \"PROJECTVERSION\"\n__description__ = \"PROJECTDESCRIPTION\"\n__url__ = \"PROJECTURL\"\n__docs__ = \"https://PROJECTNAME.readthedocs.io/en/latest/\"\n__author__ = \"PROJECTAUTHOR\"\n__author_email__ = \"PROJECTAUTHOREMAIL\"\n__license__ = \"PROJECTLICENSE\"\n__bugtracker__ = \"PROJECTURL/issues\"\n"}}
